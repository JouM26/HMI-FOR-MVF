import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QLineEdit, QPushButton,
    QLabel, QVBoxLayout, QMessageBox, QHBoxLayout, QGroupBox,
    QListWidget, QStackedWidget
)
import smtplib
from email.mime.text import MIMEText
from flask import Flask, request, render_template_string
import threading

# --- Configuración de correo ---
GMAIL_USER = "pruebatesis2025@gmail.com"
GMAIL_APP_PASSWORD = "mqof mmjq dqdw rjvu"  # Reemplaza por tu contraseña de aplicación

# --- Simulación de usuarios ---
USERS = {"JOU": {"password": "12345", "email": "pruebatesis2025@gmail.com"}}
RESET_TOKENS = {}

# --- Simulación de la máquina ---
class MaquinaInspeccion:
    def __init__(self):
        self.estado = "En espera"
        self.objeto_actual = None
        self.resultado = ""
        self.alarmas = []

    def iniciar_inspeccion(self, objeto):
        self.estado = "Inspección en curso"
        self.objeto_actual = objeto
        self.resultado = "OK"  # Simulación
        self.alarmas.clear()

    def detener(self):
        self.estado = "Detenida"

    def resetear(self):
        self.estado = "Máquina reseteada"
        self.objeto_actual = None
        self.resultado = ""
        self.alarmas.clear()

# --- Servidor Flask para restablecimiento desde el email ---
app_flask = Flask(__name__)

HTML_FORM = """
<!DOCTYPE html>
<html>
<head>
    <title>Restablecer Contraseña</title>
    <style>
        body { font-family: Arial, sans-serif; background: #f0f4f8; }
        .container { background: #fff; padding: 30px; border-radius: 10px; max-width: 350px; margin: 60px auto; box-shadow: 0 2px 8px #bbb; }
        h2 { color: #1976d2; }
        input[type=password], input[type=submit] { width: 100%; padding: 8px; margin: 8px 0; border-radius: 5px; border: 1px solid #b0b0b0; }
        input[type=submit] { background: #1976d2; color: #fff; border: none; font-weight: bold; cursor: pointer; }
        input[type=submit]:hover { background: #1565c0; }
        p { color: #d32f2f; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Restablecer Contraseña para {{ user }}</h2>
        <form method="post">
          Nueva contraseña: <input type="password" name="new_pass"><br>
          Confirmar contraseña: <input type="password" name="confirm_pass"><br>
          <input type="submit" value="Restablecer">
        </form>
        <p>{{ msg }}</p>
    </div>
</body>
</html>
"""

@app_flask.route("/reset", methods=["GET", "POST"])
def reset():
    token = request.args.get("token")
    user = RESET_TOKENS.get(token)
    msg = ""
    if not user:
        msg = "Token inválido o expirado."
        return render_template_string(HTML_FORM, user="desconocido", msg=msg)
    if request.method == "POST":
        new_pass = request.form["new_pass"]
        confirm_pass = request.form["confirm_pass"]
        if not new_pass or new_pass != confirm_pass:
            msg = "Las contraseñas no coinciden o están vacías."
        else:
            USERS[user]["password"] = new_pass
            msg = "Contraseña restablecida correctamente. Ya puedes cerrar esta ventana y volver a la aplicación."
    return render_template_string(HTML_FORM, user=user, msg=msg)

def run_flask():
    app_flask.run(port=5000, debug=False, use_reloader=False)

# --- Ventana principal tipo wireframe ---
class MainHMIWindow(QMainWindow):
    def __init__(self, username, maquina):
        super().__init__()
        self.setWindowTitle("HMI - Inspección de Módulos Fotovoltaicos")
        self.setGeometry(300, 100, 800, 500)
        self.maquina = maquina
        self.username = username

        # Menú lateral
        self.menu = QListWidget()
        self.menu.addItems(["Inicio", "Detalles", "Verificación de Estado", "Control Manual"])
        self.menu.setFixedWidth(180)
        self.menu.currentRowChanged.connect(self.cambiar_pantalla)

        # StackedWidget para cambiar de pantalla
        self.stacked = QStackedWidget()
        self.stacked.addWidget(self.pantalla_inicio())
        self.stacked.addWidget(self.pantalla_detalles())
        self.stacked.addWidget(self.pantalla_verificacion())
        self.stacked.addWidget(self.pantalla_control())

        # Layout principal
        main_layout = QHBoxLayout()
        main_layout.addWidget(self.menu)
        main_layout.addWidget(self.stacked)

        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

        # Selecciona la pantalla de inicio por defecto
        self.menu.setCurrentRow(0)

    def pantalla_inicio(self):
        widget = QWidget()
        layout = QVBoxLayout()
        titulo = QLabel("HMI - Máquina de Inspección de Módulos Fotovoltaicos")
        titulo.setStyleSheet("font-size: 22px; color: #1976d2; font-weight: bold;")
        usuario = QLabel(f"Bienvenido: {self.username}")
        usuario.setStyleSheet("font-size: 16px; color: #333;")
        layout.addWidget(titulo)
        layout.addWidget(usuario)
        layout.addStretch()
        widget.setLayout(layout)
        return widget

    def pantalla_detalles(self):
        widget = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(QLabel("Detalles del objeto inspeccionado:"))
        self.objeto_label = QLabel(f"Objeto actual: {self.maquina.objeto_actual or 'Ninguno'}")
        self.resultado_label = QLabel(f"Resultado: {self.maquina.resultado or '-'}")
        layout.addWidget(self.objeto_label)
        layout.addWidget(self.resultado_label)
        layout.addStretch()
        widget.setLayout(layout)
        return widget

    def pantalla_verificacion(self):
        widget = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(QLabel("Verificación de Estado de la Máquina:"))
        self.estado_label = QLabel(f"Estado: {self.maquina.estado}")
        layout.addWidget(self.estado_label)
        if self.maquina.alarmas:
            alarmas = "\n".join(self.maquina.alarmas)
        else:
            alarmas = "Sin alarmas"
        self.alarmas_label = QLabel(f"Alarmas: {alarmas}")
        layout.addWidget(self.alarmas_label)
        layout.addStretch()
        widget.setLayout(layout)
        return widget

    def pantalla_control(self):
        widget = QWidget()
        layout = QVBoxLayout()
        layout.addWidget(QLabel("Control Manual de la Máquina:"))
        comandos = QGroupBox("Comandos")
        comandos_layout = QHBoxLayout()
        btn_iniciar = QPushButton("Iniciar Inspección")
        btn_detener = QPushButton("Detener")
        btn_reset = QPushButton("Resetear Máquina")
        comandos_layout.addWidget(btn_iniciar)
        comandos_layout.addWidget(btn_detener)
        comandos_layout.addWidget(btn_reset)
        comandos.setLayout(comandos_layout)
        layout.addWidget(comandos)
        layout.addStretch()
        widget.setLayout(layout)

        btn_iniciar.clicked.connect(self.iniciar_inspeccion)
        btn_detener.clicked.connect(self.detener)
        btn_reset.clicked.connect(self.resetear)
        return widget

    def cambiar_pantalla(self, index):
        # Actualiza los datos en cada pantalla al cambiar
        if index == 1:  # Detalles
            self.objeto_label.setText(f"Objeto actual: {self.maquina.objeto_actual or 'Ninguno'}")
            self.resultado_label.setText(f"Resultado: {self.maquina.resultado or '-'}")
        elif index == 2:  # Verificación
            self.estado_label.setText(f"Estado: {self.maquina.estado}")
            if self.maquina.alarmas:
                alarmas = "\n".join(self.maquina.alarmas)
            else:
                alarmas = "Sin alarmas"
            self.alarmas_label.setText(f"Alarmas: {alarmas}")
        self.stacked.setCurrentIndex(index)

    def iniciar_inspeccion(self):
        self.maquina.iniciar_inspeccion("Módulo FV A")
        self.cambiar_pantalla(self.menu.currentRow())

    def detener(self):
        self.maquina.detener()
        self.cambiar_pantalla(self.menu.currentRow())

    def resetear(self):
        self.maquina.resetear()
        self.cambiar_pantalla(self.menu.currentRow())

# --- Ventana Login ---
class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("HMI - Iniciar Sesión")
        self.setGeometry(400, 200, 350, 250)
        self.setStyleSheet("""
            QWidget { background-color: #f0f4f8; font-family: Arial; font-size: 14px; }
            QLineEdit { border: 1px solid #b0b0b0; border-radius: 6px; padding: 6px; background: #fff; }
            QPushButton { background-color: #1976d2; color: white; border-radius: 6px; padding: 8px; font-weight: bold; }
            QPushButton:hover { background-color: #1565c0; }
            QLabel { color: #333; }
        """)

        # Widgets
        self.user_input = QLineEdit()
        self.user_input.setPlaceholderText("Usuario")

        self.pass_input = QLineEdit()
        self.pass_input.setPlaceholderText("Contraseña")
        self.pass_input.setEchoMode(QLineEdit.Password)

        self.login_btn = QPushButton("Iniciar Sesión")
        self.recover_btn = QPushButton("Recuperar Contraseña")
        self.msg_label = QLabel("")

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.user_input)
        layout.addWidget(self.pass_input)
        layout.addWidget(self.login_btn)
        layout.addWidget(self.recover_btn)
        layout.addWidget(self.msg_label)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        # Eventos
        self.login_btn.clicked.connect(self.validate_login)
        self.recover_btn.clicked.connect(self.open_recover)

        # Instancia de la máquina
        self.maquina = MaquinaInspeccion()

    def validate_login(self):
        u = self.user_input.text()
        p = self.pass_input.text()
        if u in USERS and USERS[u]["password"] == p:
            QMessageBox.information(self, "Éxito", "Login correcto")
            self.user_input.clear()
            self.pass_input.clear()
            self.msg_label.clear()
            self.close()
            self.mainhmi = MainHMIWindow(u, self.maquina)
            self.mainhmi.show()
        else:
            self.msg_label.setText("Error: credenciales inválidas")
            self.user_input.clear()
            self.pass_input.clear()

    def open_recover(self):
        self.recover = RecoverPasswordWindow()
        self.recover.show()

# --- Ventana Recuperar Contraseña ---
class RecoverPasswordWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Recuperar Contraseña")
        self.setGeometry(450, 250, 350, 150)
        self.setStyleSheet("""
            QWidget { background-color: #f0f4f8; font-family: Arial; font-size: 14px; }
            QLineEdit { border: 1px solid #b0b0b0; border-radius: 6px; padding: 6px; background: #fff; }
            QPushButton { background-color: #1976d2; color: white; border-radius: 6px; padding: 8px; font-weight: bold; }
            QPushButton:hover { background-color: #1565c0; }
            QLabel { color: #333; }
        """)

        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("Correo registrado")
        self.send_btn = QPushButton("Enviar enlace")
        self.msg_label = QLabel("")

        layout = QVBoxLayout()
        layout.addWidget(self.email_input)
        layout.addWidget(self.send_btn)
        layout.addWidget(self.msg_label)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.send_btn.clicked.connect(self.send_email)

    def send_email(self):
        email = self.email_input.text()
        for user, data in USERS.items():
            if data["email"] == email:
                token = user + "_token"
                RESET_TOKENS[token] = user
                # Enviar correo real con enlace a Flask
                try:
                    enlace = f"http://localhost:5000/reset?token={token}"
                    msg = MIMEText(
                        f"Haz clic en este enlace para restablecer tu contraseña para la HMI de inspección de módulos fotovoltaicos:\n\n{enlace}\n\nSi no solicitaste este cambio, ignora este mensaje."
                    )
                    msg["Subject"] = "Recuperación de contraseña HMI - Inspección Fotovoltaica"
                    msg["From"] = GMAIL_USER
                    msg["To"] = email

                    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                        server.login(GMAIL_USER, GMAIL_APP_PASSWORD)
                        server.sendmail(GMAIL_USER, [email], msg.as_string())

                    QMessageBox.information(self, "Recuperación", "Se envió un enlace de recuperación a tu correo.")
                except Exception as e:
                    QMessageBox.warning(self, "Error", f"No se pudo enviar el correo: {e}")
                self.close()
                return
        self.msg_label.setText("Correo no registrado.")

# --- Ejecutar aplicación ---
if __name__ == "__main__":
    # Iniciar Flask en un hilo aparte
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    app = QApplication(sys.argv)
    window = LoginWindow()
    window.show()
    sys.exit(app.exec_())