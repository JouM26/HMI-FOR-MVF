import sys
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QLineEdit, QPushButton,
    QLabel, QVBoxLayout, QMessageBox, QHBoxLayout, QGroupBox
)
import smtplib
from email.mime.text import MIMEText
from flask import Flask, request, render_template_string
import threading

# --- Configuración de correo ---
GMAIL_USER = "pruebatesis2025@gmail.com"
GMAIL_APP_PASSWORD = "mqof mmjq dqdw rjvu"  # Reemplaza por tu contraseña de aplicación

# --- Simulación de usuarios ---
USERS = {"JOU": {"password": "12345", "email": "pruebatesis2025@gmail.com"}}
RESET_TOKENS = {}

# --- Servidor Flask para restablecimiento desde el email ---
app_flask = Flask(__name__)

HTML_FORM = """
<!DOCTYPE html>
<html>
<head>
    <title>Restablecer Contraseña</title>
    <style>
        body { font-family: Arial, sans-serif; background: #f0f4f8; }
        .container { background: #fff; padding: 30px; border-radius: 10px; max-width: 350px; margin: 60px auto; box-shadow: 0 2px 8px #bbb; }
        h2 { color: #1976d2; }
        input[type=password], input[type=submit] { width: 100%; padding: 8px; margin: 8px 0; border-radius: 5px; border: 1px solid #b0b0b0; }
        input[type=submit] { background: #1976d2; color: #fff; border: none; font-weight: bold; cursor: pointer; }
        input[type=submit]:hover { background: #1565c0; }
        p { color: #d32f2f; }
    </style>
</head>
<body>
    <div class="container">
        <h2>Restablecer Contraseña para {{ user }}</h2>
        <form method="post">
          Nueva contraseña: <input type="password" name="new_pass"><br>
          Confirmar contraseña: <input type="password" name="confirm_pass"><br>
          <input type="submit" value="Restablecer">
        </form>
        <p>{{ msg }}</p>
    </div>
</body>
</html>
"""

@app_flask.route("/reset", methods=["GET", "POST"])
def reset():
    token = request.args.get("token")
    user = RESET_TOKENS.get(token)
    msg = ""
    if not user:
        msg = "Token inválido o expirado."
        return render_template_string(HTML_FORM, user="desconocido", msg=msg)
    if request.method == "POST":
        new_pass = request.form["new_pass"]
        confirm_pass = request.form["confirm_pass"]
        if not new_pass or new_pass != confirm_pass:
            msg = "Las contraseñas no coinciden o están vacías."
        else:
            USERS[user]["password"] = new_pass
            msg = "Contraseña restablecida correctamente. Ya puedes cerrar esta ventana y volver a la aplicación."
    return render_template_string(HTML_FORM, user=user, msg=msg)

def run_flask():
    app_flask.run(port=5000, debug=False, use_reloader=False)

# --- Ventana Bienvenida / HMI ---
class WelcomeWindow(QMainWindow):
    def __init__(self, username):
        super().__init__()
        self.setWindowTitle("HMI - Inspección de Módulos Fotovoltaicos")
        self.setGeometry(400, 200, 500, 350)
        self.setStyleSheet("""
            QWidget { background-color: #f0f4f8; font-family: Arial; font-size: 15px; }
            QLabel#titulo { font-size: 22px; color: #1976d2; font-weight: bold; }
            QLabel#usuario { font-size: 16px; color: #333; }
            QPushButton { background-color: #1976d2; color: white; border-radius: 6px; padding: 10px; font-weight: bold; }
            QPushButton:hover { background-color: #1565c0; }
            QGroupBox { border: 2px solid #1976d2; border-radius: 8px; margin-top: 10px; }
            QGroupBox:title { subcontrol-origin: margin; left: 10px; padding: 0 3px 0 3px; }
        """)

        layout = QVBoxLayout()

        titulo = QLabel("HMI - Máquina de Inspección de Módulos Fotovoltaicos")
        titulo.setObjectName("titulo")
        layout.addWidget(titulo)

        usuario = QLabel(f"Bienvenido: {username}")
        usuario.setObjectName("usuario")
        layout.addWidget(usuario)

        # Simulación de comandos HMI
        comandos = QGroupBox("Comandos de la Máquina")
        comandos_layout = QHBoxLayout()
        btn_iniciar = QPushButton("Iniciar Inspección")
        btn_detener = QPushButton("Detener")
        btn_reset = QPushButton("Resetear Máquina")
        comandos_layout.addWidget(btn_iniciar)
        comandos_layout.addWidget(btn_detener)
        comandos_layout.addWidget(btn_reset)
        comandos.setLayout(comandos_layout)
        layout.addWidget(comandos)

        # Estado simulado
        self.estado_label = QLabel("Estado: En espera")
        layout.addWidget(self.estado_label)

        # Acciones de los botones
        btn_iniciar.clicked.connect(lambda: self.estado_label.setText("Estado: Inspección en curso"))
        btn_detener.clicked.connect(lambda: self.estado_label.setText("Estado: Detenida"))
        btn_reset.clicked.connect(lambda: self.estado_label.setText("Estado: Máquina reseteada"))

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

# --- Ventana Login ---
class LoginWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("HMI - Iniciar Sesión")
        self.setGeometry(400, 200, 350, 250)
        self.setStyleSheet("""
            QWidget { background-color: #f0f4f8; font-family: Arial; font-size: 14px; }
            QLineEdit { border: 1px solid #b0b0b0; border-radius: 6px; padding: 6px; background: #fff; }
            QPushButton { background-color: #1976d2; color: white; border-radius: 6px; padding: 8px; font-weight: bold; }
            QPushButton:hover { background-color: #1565c0; }
            QLabel { color: #333; }
        """)

        # Widgets
        self.user_input = QLineEdit()
        self.user_input.setPlaceholderText("Usuario")

        self.pass_input = QLineEdit()
        self.pass_input.setPlaceholderText("Contraseña")
        self.pass_input.setEchoMode(QLineEdit.Password)

        self.login_btn = QPushButton("Iniciar Sesión")
        self.recover_btn = QPushButton("Recuperar Contraseña")
        self.msg_label = QLabel("")

        # Layout
        layout = QVBoxLayout()
        layout.addWidget(self.user_input)
        layout.addWidget(self.pass_input)
        layout.addWidget(self.login_btn)
        layout.addWidget(self.recover_btn)
        layout.addWidget(self.msg_label)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        # Eventos
        self.login_btn.clicked.connect(self.validate_login)
        self.recover_btn.clicked.connect(self.open_recover)

    def validate_login(self):
        u = self.user_input.text()
        p = self.pass_input.text()
        if u in USERS and USERS[u]["password"] == p:
            QMessageBox.information(self, "Éxito", "Login correcto")
            self.user_input.clear()
            self.pass_input.clear()
            self.msg_label.clear()
            self.close()
            self.welcome = WelcomeWindow(u)
            self.welcome.show()
        else:
            self.msg_label.setText("Error: credenciales inválidas")
            self.user_input.clear()
            self.pass_input.clear()

    def open_recover(self):
        self.recover = RecoverPasswordWindow()
        self.recover.show()

# --- Ventana Recuperar Contraseña ---
class RecoverPasswordWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Recuperar Contraseña")
        self.setGeometry(450, 250, 350, 150)
        self.setStyleSheet("""
            QWidget { background-color: #f0f4f8; font-family: Arial; font-size: 14px; }
            QLineEdit { border: 1px solid #b0b0b0; border-radius: 6px; padding: 6px; background: #fff; }
            QPushButton { background-color: #1976d2; color: white; border-radius: 6px; padding: 8px; font-weight: bold; }
            QPushButton:hover { background-color: #1565c0; }
            QLabel { color: #333; }
        """)

        self.email_input = QLineEdit()
        self.email_input.setPlaceholderText("Correo registrado")
        self.send_btn = QPushButton("Enviar enlace")
        self.msg_label = QLabel("")

        layout = QVBoxLayout()
        layout.addWidget(self.email_input)
        layout.addWidget(self.send_btn)
        layout.addWidget(self.msg_label)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.send_btn.clicked.connect(self.send_email)

    def send_email(self):
        email = self.email_input.text()
        for user, data in USERS.items():
            if data["email"] == email:
                token = user + "_token"
                RESET_TOKENS[token] = user
                # Enviar correo real con enlace a Flask
                try:
                    enlace = f"http://localhost:5000/reset?token={token}"
                    msg = MIMEText(
                        f"Haz clic en este enlace para restablecer tu contraseña para la HMI de inspección de módulos fotovoltaicos:\n\n{enlace}\n\nSi no solicitaste este cambio, ignora este mensaje."
                    )
                    msg["Subject"] = "Recuperación de contraseña HMI - Inspección Fotovoltaica"
                    msg["From"] = GMAIL_USER
                    msg["To"] = email

                    with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
                        server.login(GMAIL_USER, GMAIL_APP_PASSWORD)
                        server.sendmail(GMAIL_USER, [email], msg.as_string())

                    QMessageBox.information(self, "Recuperación", "Se envió un enlace de recuperación a tu correo.")
                except Exception as e:
                    QMessageBox.warning(self, "Error", f"No se pudo enviar el correo: {e}")
                self.close()
                return
        self.msg_label.setText("Correo no registrado.")

# --- Ejecutar aplicación ---
if __name__ == "__main__":
    # Iniciar Flask en un hilo aparte
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()

    app = QApplication(sys.argv)
    window = LoginWindow()
    window.show()
    sys.exit(app.exec_())